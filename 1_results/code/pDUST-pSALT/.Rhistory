chimere.area.km2
emep.area.km2 <- sum(values(emep.surf.raster * emep.area.raster / 100))
emep.area.km2
emep.area.km2 <- sum(values(emep.surf.raster * emep.area.raster / 100)) / 1e6
emep.area.km2
max(values(emep.area.raster))
max(values(chimere.area.raster))
rep(precursor, 2)
rep('precursor', 2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
snap
precursor
chimere.emis.raster <- raster(chimere.emis, varname = precursor, band = snap)
emep.emis.raster <- raster(emep.emis, varname = precursor, band = snap)
plot(chimere.emis.raster)
plot(log(chimere.emis.raster))
chimere.area.emis.tot <- chimere.area.emis.tot + sum(values(chimere.emis.raster * chimere.surf.raster * chimere.area / 100))
values(chimere.emis.raster * chimere.surf.raster * chimere.area / 100)
chimere.emis.raster * chimere.surf.raster
chimere.surf.raster * chimere.area
chimere.area
# calculate emissions over the area for the two inventories
emission.df <- {}
for (precursor in c('NOx')) {
chimere.area.emis.tot <- 0
emep.area.emis.tot <- 0
for (snap in 1:10) {
chimere.emis.raster <- raster(chimere.emis, varname = precursor, band = snap)
emep.emis.raster <- raster(emep.emis, varname = precursor, band = snap)
# calculate emissions over the area
chimere.area.emis.tot <- chimere.area.emis.tot + sum(values(chimere.emis.raster * chimere.surf.raster * chimere.area.raster / 100))
emep.area.emis.tot <- emep.area.emis.tot + sum(values(emep.emis.raster * emep.surf.raster * emep.area.raster / 100)) * 1e9
}
emission.df <- rbind(emission.df,
data.frame(model = c('emep', 'chimere'),
precursor = rep(precursor, 2),
emission_Mg = c(emep.area.emis.tot, chimere.area.emis.tot)))
}
emission.df
source('~/.active-rstudio-document', echo=TRUE)
emission.df
chimere.area.km2
emep.area.km2
sqrt(1600)
emission.df <- {}
for (precursor in c('NOx', 'PPM')) {
chimere.area.emis.tot <- 0
emep.area.emis.tot <- 0
for (snap in 1:10) {
chimere.emis.raster <- raster(chimere.emis, varname = precursor, band = snap)
emep.emis.raster <- raster(emep.emis, varname = precursor, band = snap)
# calculate emissions over the area
chimere.area.emis.tot <- chimere.area.emis.tot + sum(values(chimere.emis.raster * chimere.surf.raster * chimere.area.raster / 100))
emep.area.emis.tot <- emep.area.emis.tot + sum(values(emep.emis.raster * emep.surf.raster * emep.area.raster / 100)) / 1e9
}
emission.df <- rbind(emission.df,
data.frame(model = c('emep', 'chimere'),
precursor = rep(precursor, 2),
emission_Mg = c(emep.area.emis.tot, chimere.area.emis.tot)))
}
emission.df
# Compare weighting functions of SHERPA Emep and Chimere
library(raster)
sr.emep.nc <- 'O:/Integrated_assessment/SHERPA/20170904_emep_totalEmis/3_source_receptors/SR_SURF_ug_PM25_rh50__totalEmis.nc'
sr.chimere.nc <- 'O:/Integrated_assessment/SHERPA/20170322_v18_SrrResults_PotencyBased/3_source_receptors/SR_PM25_Y_20170322_potencyBased.nc'
# Order_Pollutant = "NOx, NMVOC, NH3, PPM, SOx"
pol.list <- c("NOx", "NMVOC", "NH3", "PPM", "SOx")
i.pol <- 4
for (i.pol in 1:5) {
pollutant <- pol.list[i.pol]
#
emep.alpha.pol <- raster(sr.emep.nc, varname = 'alpha', band = i.pol)
extent(emep.alpha.pol) <- extent(c(-30, 90, 30, 82))
chimere.alpha.pol <- raster(sr.chimere.nc, varname = 'alpha', band = i.pol)
extent(chimere.alpha.pol) <- extent(c(-10.5, 37.5, 34, 62))
emep.alpha.pol.resampled <- resample(emep.alpha.pol, chimere.alpha.pol, method = "bilinear")
smoothScatter(values(emep.alpha.pol.resampled), values(chimere.alpha.pol))
lm.alpha <- lm(data = data.frame(emep.alpha = values(emep.alpha.pol.resampled),
chimere.alpha = values(chimere.alpha.pol)),
formula = emep.alpha ~ chimere.alpha)
summary(lm.alpha)
plot((emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100)
hist(values(emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100)
mean(values(emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100, na.rm = TRUE)
plot(emep.alpha.pol)
plot(chimere.alpha.pol)
plot(emep.alpha.pol.resampled)
}
emep.alpha <- raster(sr.emep.nc, varname = 'alpha', band = 1)
plot(emep.alpha)
i.pol <- 4
pollutant <- pol.list[i.pol]
#
emep.alpha.pol <- raster(sr.emep.nc, varname = 'alpha', band = i.pol)
extent(emep.alpha.pol) <- extent(c(-30, 90, 30, 82))
chimere.alpha.pol <- raster(sr.chimere.nc, varname = 'alpha', band = i.pol)
extent(chimere.alpha.pol) <- extent(c(-10.5, 37.5, 34, 62))
emep.alpha.pol.resampled <- resample(emep.alpha.pol, chimere.alpha.pol, method = "bilinear")
smoothScatter(values(emep.alpha.pol.resampled), values(chimere.alpha.pol))
lm.alpha <- lm(data = data.frame(emep.alpha = values(emep.alpha.pol.resampled),
chimere.alpha = values(chimere.alpha.pol)),
formula = emep.alpha ~ chimere.alpha)
summary(lm.alpha)
plot((emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100)
hist(values(emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100)
mean(values(emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100, na.rm = TRUE)
smoothScatter(values(emep.alpha.pol.resampled), values(chimere.alpha.pol))
summary(lm.alpha)
?plot
range((emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100)
brks <- seq(from = -100, to = 350, by = 25)
brks <- seq(from = -100, to = 350, by = 25)
cols <- col=colorRampPalette(c("red", "white", "blue"))(255)
cols <- colorRampPalette(c("red", "white", "blue"))(255)
plot((emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100, col = cols, breaks = brks)
brks <- seq(from = -100, to = 350, by = 50)
cols <- colorRampPalette(c("red", "white", "blue"))(255)
plot((emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100, col = cols, breaks = brks)
plot((emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100)
hist(values(emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100)
mean(values(emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100, na.rm = TRUE)
summary(lm.alpha)
smoothScatter(values(emep.alpha.pol.resampled), values(chimere.alpha.pol))
(120+7.61)*2
2/1.5
(2/1.5)^2
20000/300000
112*10*4*5
112*10*4*2
5200/(112*5*10*4)
25/365
1-25/365
13000/(112*5*10*4)
2e9/0.5e6
lons < seq(5, 6, 0.1)
lons <- seq(5, 6, 0.1)
lons
round(lons / 0.5) * 0.5
round((lons - 0.5 / 2) / 0.5) * 0.5
round((lons - 0.5 / 2) / 0.5) * 0.5 + 0.5/2
lons_rounded <- round((lons - 0.5 / 2) / 0.5) * 0.5 + 0.5/2
lons <- seq(5, 7, 0.1)
lons_rounded <- round((lons - 0.5 / 2) / 0.5) * 0.5 + 0.5/2
data.frame(lons, lons_rounded)
plot(lons, lons_rounded)
lons <- seq(5, 7, 0.01)
lons_rounded <- round((lons - 0.5 / 2) / 0.5) * 0.5 + 0.5/2
plot(lons, lons_rounded)
# convert to coordinates of a cell into the name of the Kernel
coords2kernelfilename <- function(lat.area, lon.area, dlat, dlon) {
# lat.area: latitude of the centre of the study area
# lon.area: longitude of the centre of the study area
# dlat: resolution of the kernel grid in N-S direction
# dlon: resolution of the kernel grid in W-E direction
# round the coordinates of the study area centre to the closest grid cell centre
lat.grid <- round((lat.area - dlat / 2) / dlat) * dlat + dlat / 2
lon.grid <- round((lon.area - dlon / 2) / dlon) * dlon + dlon / 2
# convert lat or lon to string with 3 positions after the comma,
# then convert it to a string of 6 characters
# and finally convert eventual leading white spaces in zeros
lat.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", lat.grid)))
lon.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", abs(lon.grid))))
if (lon < 0) {
# if the longitude is negative use 'W' (West)
kernelfilename <- paste0('SK_N', lat.str, 'W', lon.str, '.txt')
} else {
# if the longitude is positve use 'E' (East)
kernelfilename <- paste0('SK_N', lat.str, 'E', lon.str, '.txt')
}
return(data.frame(lat.grid, lon.grid, kernelfilename)
}
# convert to coordinates of a cell into the name of the Kernel
coords2kernelfilename <- function(lat.area, lon.area, dlat, dlon) {
# lat.area: latitude of the centre of the study area
# lon.area: longitude of the centre of the study area
# dlat: resolution of the kernel grid in N-S direction
# dlon: resolution of the kernel grid in W-E direction
# round the coordinates of the study area centre to the closest grid cell centre
lat.grid <- round((lat.area - dlat / 2) / dlat) * dlat + dlat / 2
lon.grid <- round((lon.area - dlon / 2) / dlon) * dlon + dlon / 2
# convert lat or lon to string with 3 positions after the comma,
# then convert it to a string of 6 characters
# and finally convert eventual leading white spaces in zeros
lat.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", lat.grid)))
lon.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", abs(lon.grid))))
if (lon < 0) {
# if the longitude is negative use 'W' (West)
kernelfilename <- paste0('SK_N', lat.str, 'W', lon.str, '.txt')
} else {
# if the longitude is positve use 'E' (East)
kernelfilename <- paste0('SK_N', lat.str, 'E', lon.str, '.txt')
}
return(data.frame(lat.grid, lon.grid, kernelfilename))
}
coords2kernelfilename(50.01, 4.9, 0.25, 0.5)
# convert to coordinates of a cell into the name of the Kernel
coords2kernelfilename <- function(lat.area, lon.area, dlat, dlon) {
# lat.area: latitude of the centre of the study area
# lon.area: longitude of the centre of the study area
# dlat: resolution of the kernel grid in N-S direction
# dlon: resolution of the kernel grid in W-E direction
# round the coordinates of the study area centre to the closest grid cell centre
lat.grid <- round((lat.area - dlat / 2) / dlat) * dlat + dlat / 2
lon.grid <- round((lon.area - dlon / 2) / dlon) * dlon + dlon / 2
# convert lat or lon to string with 3 positions after the comma,
# then convert it to a string of 6 characters
# and finally convert eventual leading white spaces in zeros
lat.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", lat.grid)))
lon.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", abs(lon.grid))))
if (lon.grid < 0) {
# if the longitude is negative use 'W' (West)
kernelfilename <- paste0('SK_N', lat.str, 'W', lon.str, '.txt')
} else {
# if the longitude is positve use 'E' (East)
kernelfilename <- paste0('SK_N', lat.str, 'E', lon.str, '.txt')
}
return(data.frame(lat.grid, lon.grid, kernelfilename))
}
coords2kernelfilename(50.01, 4.9, 0.25, 0.5)
coords2kernelfilename(50, 4.9, 0.25, 0.5)
coords2kernelfilename(49.99, 4.9, 0.25, 0.5)
coords2kernelfilename(49.874, 4.9, 0.25, 0.5)
coords2kernelfilename(49.876, 4.9, 0.25, 0.5)
# some testing
lat.list <- seq(49, 51, 0.13)
lon.list <- seq(-1, 1, 0.09)
kernel.asc.path <- "D:/temp/SourceKernelsASCII/EUR/"
kernel.file.list <- list.files(path = kernel.txt.path)
for (lat in lat.list) {
for (lon in lon.list) {
kernel.filename <- coords2kernelfilename(lat, lon, 0.25, 0.5)
if (kernel.filename %in% kernel.file.list) {
print(paste(kernel.filename, 'exists'))
} else {
print(paste(kernel.filename, 'does NOT exist!!!!!'))
}
}
}
kernel.asc.path <- "D:/temp/SourceKernelsASCII/EUR/"
kernel.file.list <- list.files(path = kernel.txt.path)
kernel.asc.path <- "D:/temp/SourceKernelsASCII/EUR/"
kernel.file.list <- list.files(path = kernel.txt.path)
kernel.file.list <- list.files(path = kernel.asc.path)
for (lat in lat.list) {
for (lon in lon.list) {
kernel.filename <- coords2kernelfilename(lat, lon, 0.25, 0.5)
if (kernel.filename %in% kernel.file.list) {
print(paste(kernel.filename, 'exists'))
} else {
print(paste(kernel.filename, 'does NOT exist!!!!!'))
}
}
}
# convert to coordinates of a cell into the name of the Kernel
coords2kernelfilename <- function(lat.area, lon.area, dlat, dlon) {
# lat.area: latitude of the centre of the study area
# lon.area: longitude of the centre of the study area
# dlat: resolution of the kernel grid in N-S direction
# dlon: resolution of the kernel grid in W-E direction
# round the coordinates of the study area centre to the closest grid cell centre
lat.grid <- round((lat.area - dlat / 2) / dlat) * dlat + dlat / 2
lon.grid <- round((lon.area - dlon / 2) / dlon) * dlon + dlon / 2
# convert lat or lon to string with 3 positions after the comma,
# then convert it to a string of 6 characters
# and finally convert eventual leading white spaces in zeros
lat.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", lat.grid)))
lon.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", abs(lon.grid))))
if (lon.grid < 0) {
# if the longitude is negative use 'W' (West)
kernelfilename <- paste0('SK_N', lat.str, 'W', lon.str, '.txt')
} else {
# if the longitude is positve use 'E' (East)
kernelfilename <- paste0('SK_N', lat.str, 'E', lon.str, '.txt')
}
# return(data.frame(lat.grid, lon.grid, kernelfilename))
return(kernelfilename)
}
# some testing
lat.list <- seq(49, 51, 0.13)
lon.list <- seq(-1, 1, 0.09)
kernel.asc.path <- "D:/temp/SourceKernelsASCII/EUR/"
kernel.file.list <- list.files(path = kernel.asc.path)
for (lat in lat.list) {
for (lon in lon.list) {
kernel.filename <- coords2kernelfilename(lat, lon, 0.25, 0.5)
if (kernel.filename %in% kernel.file.list) {
print(paste(kernel.filename, 'exists'))
} else {
print(paste(kernel.filename, 'does NOT exist!!!!!'))
}
}
}
# convert to coordinates of a cell into the name of the Kernel
coords2kernelfilename <- function(lat.area, lon.area, dlat, dlon) {
# lat.area: latitude of the centre of the study area
# lon.area: longitude of the centre of the study area
# dlat: resolution of the kernel grid in N-S direction
# dlon: resolution of the kernel grid in W-E direction
# round the coordinates of the study area centre to the closest grid cell centre
lat.grid <- round((lat.area - dlat / 2) / dlat) * dlat + dlat / 2
lon.grid <- round((lon.area - dlon / 2) / dlon) * dlon + dlon / 2
# convert lat or lon to string with 3 positions after the comma,
# then convert it to a string of 6 characters
# and finally convert eventual leading white spaces in zeros
lat.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", lat.grid)))
lon.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", abs(lon.grid))))
if (lon.grid < 0) {
# if the longitude is negative use 'W' (West)
kernelfilename <- paste0('SK_N', lat.str, 'W', lon.str, '.asc')
} else {
# if the longitude is positve use 'E' (East)
kernelfilename <- paste0('SK_N', lat.str, 'E', lon.str, '.asc')
}
# return(data.frame(lat.grid, lon.grid, kernelfilename))
return(kernelfilename)
}
# some testing
lat.list <- seq(49, 51, 0.13)
lon.list <- seq(-1, 1, 0.09)
kernel.asc.path <- "D:/temp/SourceKernelsASCII/EUR/"
kernel.file.list <- list.files(path = kernel.asc.path)
for (lat in lat.list) {
for (lon in lon.list) {
kernel.filename <- coords2kernelfilename(lat, lon, 0.25, 0.5)
if (kernel.filename %in% kernel.file.list) {
print(paste(kernel.filename, 'exists'))
} else {
print(paste(kernel.filename, 'does NOT exist!!!!!'))
}
}
}
source('D:/SHERPAcity/IFDM_runs/Kernel_TXT2ASCII_PNG/coordinates2kernelname.R', echo=TRUE)
area.nc.folder <- "D:/SHERPA/FUA112/fua_area_cdfs/fua151_chimere/"
city.nc.list <- list.files(path = area.nc.folder, pattern = '_City.nc')
city.nc.list
library(raster)
city.nc <- "Plovdiv_City.nc"
city.raster <- raster(paste0(area.nc.folder, city.nc))
plot(city.raster)
pm.base.city.raster <- pm.base.raster * city.raster / 100
# read file with basecase pm concentrations
# path to basecase concentrations
chimere.basecase.conc.path <- "O:/Integrated_assessment/SHERPA/20170322_v18_SrrResults_PotencyBased/2_base_concentrations/"
pm.base.file <- paste0(chimere.basecase.conc.path, "BC_conc_PM25_Y.nc")
pm.base.raster <- raster(pm.base.file)
pm.base.city.raster <- pm.base.raster * city.raster / 100
plot(pm.base.city.raster)
idx = which.max(pm.base.city.raster)
idx
pos = xyFromCell(pm.base.city.raster,idx)
pos
cityname <- sub(city.nc, "_City.nc", "")
cityname
cityname <- sub("_City.nc", "", city.nc)
cityname
# get city name removing '_City.nc'
cityname <- sub("_City.nc", "", city.nc)
# read netcdf of the city, 0-100% of cell surface in city core
city.raster <- raster(paste0(area.nc.folder, city.nc))
# select base case concentrations of cells that are 50% or more in the city core
pm.base.city.raster <- pm.base.raster * round(city.raster / 100)
# get the id of the maximum
id.max = which.max(pm.base.city.raster)
# get the position of the id
pos.max = xyFromCell(pm.base.city.raster,id.max)
pos.max
0.25/2
0.5/4
0.5/4/2
1-0.5/4/2
1-0.5/4/2-0.0625
1-0.5/4/2-2*0.0625
1-0.5/4/2-4*0.0625
city.centres.df <- data.frame()
city.centre.df <- data.frame(cityname = cityname,
lat = pos.max$y,
lon = pos.max$x)
pos.max
pos.max[1,2]
source('~/.active-rstudio-document', echo=TRUE)
city.centres.df
city.centres.df <- rbind(city.centres.df, city.centre.df)
source('~/.active-rstudio-document', echo=TRUE)
city.centres.df
wd <- "D:/SHERPA/FUA112/"
setwd(wd)
urau.codes.df <- read.table('city_urau_codes.txt', header = TRUE, sep = '\t')
urau.codes.df <- read.table('city_urau_codes.txt', header = TRUE, sep = '\t', quote = "")
urau.codes.df
source('~/.active-rstudio-document', echo=TRUE)
city.centres.df
city.nc
cityname <- sub("_City.nc", "", city.nc)
country <- urau.codes.df$NUTS0[urau.codes.df$ASCII_name == cityname]
country
cityname
source('~/.active-rstudio-document', echo=TRUE)
write.table(city.centres.df, file = 'city_list_fua151.txt' sep = ';', quote = FALSE, row.names = FALSE)
write.table(city.centres.df, file = 'city_list_fua151.txt', sep = ';', quote = FALSE, row.names = FALSE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# -----------------------------------------------------
# look up the city cell with the highest concentration
# -----------------------------------------------------
# clean up
rm(list = ls())
library(raster)
wd <- "D:/SHERPA/FUA112/"
setwd(wd)
urau.codes.df <- read.table('city_urau_codes.txt', header = TRUE, sep = '\t', quote = "")
# folder with area netcdf's for cities and fuas
area.nc.folder <- "D:/SHERPA/FUA112/fua_area_cdfs/fua151_chimere/"
city.nc.list <- list.files(path = area.nc.folder, pattern = '_City.nc')
# read file with basecase pm concentrations
# path to basecase concentrations
chimere.basecase.conc.path <- "O:/Integrated_assessment/SHERPA/20170322_v18_SrrResults_PotencyBased/2_base_concentrations/"
pm.base.file <- paste0(chimere.basecase.conc.path, "BC_conc_PM25_Y.nc")
pm.base.raster <- raster(pm.base.file)
city.centres.df <- data.frame()
city.nc <- "Plovdiv_City.nc"
for (city.nc in city.nc.list) {
# get city name removing '_City.nc'
cityname <- sub("_City.nc", "", city.nc)
country <- urau.codes.df$NUTS0[urau.codes.df$ASCII_name == cityname]
# read netcdf of the city, 0-100% of cell surface in city core
city.raster <- raster(paste0(area.nc.folder, city.nc))
# select base case concentrations of cells that are 50% or more in the city core
pm.base.city.raster <- pm.base.raster * city.raster / 100
# get the id of the maximum
id.max = which.max(pm.base.city.raster)
# get the position of the id
pos.max = xyFromCell(pm.base.city.raster,id.max)
city.centre.df <- data.frame(cityname = cityname,
lat = as.double(pos.max[1,2]),
lon = as.double(pos.max[1,1]),
codeid = city.nc,
country = country)
city.centres.df <- rbind(city.centres.df, city.centre.df)
}
write.table(city.centres.df, file = 'city_list_fua151.txt', sep = ';', quote = FALSE, row.names = FALSE)
rm(list = ls())
library(raster)
wd <- "D:/SHERPA/FUA112/"
setwd(wd)
urau.codes.df <- read.table('city_urau_codes.txt', header = TRUE, sep = '\t', quote = "")
urau.codes.df
area.nc.folder <- "D:/SHERPA/FUA112/fua_area_cdfs/fua151_chimere/"
city.nc.list <- list.files(path = area.nc.folder, pattern = '_City.nc')
city.nc.list
area.nc.folder <- "D:/SHERPA/FUA112/fua_area_cdfs/allAreas_chimere/"
city.nc.list <- list.files(path = area.nc.folder, pattern = '_City.nc')
city.nc.list
source('~/.active-rstudio-document', echo=TRUE)
dev.off()
source('D:/SHERPA/FUA112/pDUST-pSALT/get_salt_dust_in_fuas.R', echo=TRUE)
source('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode/1_createResults/SHERPA_PM25_Atlas/pDUST-pSALT/get_salt_dust_in_fuas.R')
debugSource('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode/1_createResults/SHERPA_PM25_Atlas/pDUST-pSALT/get_salt_dust_in_fuas.R')
chimere.basecase.conc.path
paste0(chimere.natural.pm.path, 'p', pm.type, '-', pm.size, '-basecase.nc')
pm.natural.raster
debugSource('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode/1_createResults/SHERPA_PM25_Atlas/pDUST-pSALT/get_salt_dust_in_fuas.R')
pn.natural.raster
pm.natural.raster
pm.natural.file
source('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode/1_createResults/SHERPA_PM25_Atlas/pDUST-pSALT/get_salt_dust_in_fuas.R')
source('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas.R')
source('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
debugSource('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_edgar2015_SRR/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
pm.base.file
debugSource('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_edgar2015_SRR/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
pm.base.file
pm.natural.file
city.df$cityname
city.coord
head(city.df)
class(city.coord)
debugSource('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_edgar2015_SRR/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
source('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_edgar2015_SRR/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
source('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_cams2015_SRR/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
source('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_cams2015_SRR/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
source('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_cams2015_SRR/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
0.05^
2
2/0.1
20^2
source('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_emiCams42_SRRCams221/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
source('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_emepV434_camsV42/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
debugSource('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_emepV434_camsV42/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
paste0(chimere.basecase.conc.path, "BCconc_emepV434_camsv42_SURF_ug_PM", pm.size, "_rh50.nc")
file.exists(pm.base.file)
# read file with basecase pm concentrations
pm.base.file <- paste0(chimere.basecase.conc.path, "BCconcSURF_ug_PM", pm.size, "_rh50.nc")
pm.base.raster <- raster(pm.base.file)
# read file with basecase pm concentrations
pm.base.file <- paste0(chimere.basecase.conc.path, "BC_SURF_ug_PM", pm.size, "_rh50.nc")
pm.base.raster <- raster(pm.base.file)
pm.base.file
chimere.basecase.conc.path
# path to basecase concentrations
chimere.basecase.conc.path <- "D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_emepV434_camsV42/1_results/code/20210325_SRR/2_base_concentrations/"
# read file with basecase pm concentrations
pm.base.file <- paste0(chimere.basecase.conc.path, "BC_SURF_ug_PM", pm.size, "_rh50.nc")
pm.base.raster <- raster(pm.base.file)
debugSource('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_emepV434_camsV42/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
pm.base.raster
debugSource('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_emepV434_camsV42/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
pm.natural.file
pm.base.raster
pm.natural.raster
source('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_emepV434_camsV42/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
source('D:/WORK/projects/1_IPPA_2021/103_tryAtlasBartCode_emepV434_camsV42/1_results/code/pDUST-pSALT/get_salt_dust_in_fuas_onlypm25.R')
